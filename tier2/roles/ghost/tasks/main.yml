---
- name: Add Certbot repository
  apt_repository:
    repo: ppa:certbot/certbot
    state: present
    update_cache: yes
  become: true

- name: Install Certbot packages
  apt:
    name: "{{ packages }}"
  become: true
  vars:
    packages:
      - software-properties-common
      - certbot

- name: Install Docker requirements
  apt:
    name: "{{ packages }}"
  become: true
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true

- name: Register lsb release
  command: lsb_release -cs
  register: lsb_release

- name: Add Docker stable repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ lsb_release.stdout }} stable"
    state: present
    update_cache: yes
  become: true

- name: Install Docker CE
  apt:
    name: docker-ce
  become: true

- name: Add user '{{ ansible_env.USER }}' to docker group
  user:
    name: '{{ ansible_env.USER }}'
    groups: docker
    append: yes
  become: true

- name: Download docker-compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.21.2/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: 0755
  become: true

- name: Create Ghost deploy directory
  file:
    path: "/home/{{ ansible_env.USER }}/ghost_deploy"
    state: directory
    mode: 0755
  register: ghost_deploy_path

- name: Upload docker-compose configuration
  template:
    src: docker-compose.yml.j2
    dest: "{{ ghost_deploy_path.path }}/docker-compose.yml"

- name: Create nginx Docker directory
  file:
    path: "{{ ghost_deploy_path.path }}/nginx"
    state: directory
    mode: 0755
  register: ghost_nginx_path

- name: Upload nginx configuration
  template:
    src: nginx/default.conf.j2
    dest: "{{ ghost_nginx_path.path }}/default.conf"

- name: Upload nginx Dockerfile
  copy:
    src: nginx/Dockerfile
    dest: "{{ ghost_nginx_path.path }}/Dockerfile"

- name: Create ghost_content mount point
  file:
    path: "/home/{{ ansible_env.USER }}/ghost_content"
    state: directory
  register: ghost_content_path

- name: Create nginx mount point
  file:
    path: /usr/share/nginx/html
    state: directory
  become: true

- name: Restore SSL certificates
  register: letsencrypt_restored
  shell: systools restore -d /etc/letsencrypt
  args:
    creates: /etc/letsencrypt/live/stainsbury.com
  become: yes
  become_flags: "-E"
  ignore_errors: yes

- debug:
    msg: Failed to restore letsencrypt certificates. You may need to generate these manually.
  when: letsencrypt_restored.rc > 0

- name: Restore ghost_content
  register: ghost_content_restored
  shell: "systools restore -d {{ ghost_content_path.path }}"
  args:
    # We already created the base directory, so we'll make sure that we restored
    # at least the themes directory. This should ensure that we only ever do
    # this during bootstrapping.
    creates: "{{ ghost_content_path.path }}/themes"
  ignore_errors: yes

- debug:
    msg: Failed to restore ghost_content. You may need to generate these manually.
  when: ghost_content_restored.rc > 0

- name: Install Python Pip docker dependencies
  pip:
    name:
      - docker
      - docker-compose

- name: Start Docker daemon
  service:
    name: docker
    state: started
  become: true

- name: Bring up Ghost Docker services
  # TODO: figure out why this fails on first run
  docker_service:
    project_src: "{{ ghost_deploy_path.path }}"
    state: present
    # TODO: fix so that we can use TLS
    # see: https://github.com/ansible/ansible/issues/29471#issuecomment-329736312
    tls: no

- name: Install certbot renewal cron
  cron:
    name: "renew certificates"
    minute: 0
    hour: 2
    # TODO variablize container name
    job: certbot certonly -n --webroot -w /usr/share/nginx/html -d stainsbury.com --deploy-hook='docker exec ghost_deploy_nginx_1 nginx -s reload'
    user: root
  become: yes

- name: Upload backup script
  copy:
    src: backup.sh
    dest: /home/samrap/scripts/backup.sh
    mode: '0775'

- name: Install backup cron
  cron:
    name: "run back up script"
    minute: 30
    hour: 2
    job: "/home/samrap/scripts/backup.sh > /home/{{ ansible_env.USER }}/logs/backup.log 2>&1"
    user: root
  become: yes
